import logging
import re
import sqlite3
from collections import Counter, defaultdict
from datetime import datetime, timedelta

import asyncio
import openai
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import RetryAfter
from bs4 import BeautifulSoup

from job_scraper import scrape_jobs
from pars_job_cryptocurrency import scrape_jobs_2
from scraper import scrape_jobs_3
from pars_job_degencrypto import scrape_jobs_4


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á–∏
TOKEN = '7415980925:AAEbwiRWGTOGuMQhazfWS8zGVCcwYEcMLuM'
OPENAI_API_KEY = 'sk-proj-kEUip-CyUJBe7ZoiIm8iACgJic0fwFcojKJdwC7eR8-FWT8vrzlyQQw77lT3BlbkFJDUgLriLYDOVGLxfbjKOC' \
                 'FyHQyGgIS6UKabrF7zm4GtDW1i16zQsliGINIA'


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("chat_messages.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id TEXT,
    message_text TEXT,
    date TIMESTAMP
)
""")
conn.commit()

# Scheduler –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
message_sentiment_data = defaultdict(list)


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
def create_database():
    conn = sqlite3.connect('mess.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mess (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            text TEXT,
            sentiment REAL,
            date TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()


create_database()


# –ö–æ–º–∞–Ω–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç.")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.message_handler(commands=['admin'])
async def cmd_admin_panel(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.is_chat_admin():
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", reply_markup=get_admin_panel())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(commands=['publish_weekly_post'])
async def cmd_publish_weekly_post(message: types.Message):
    print("–ö–æ–º–∞–Ω–¥–∞ /publish_weekly_post –≤—ã–∑–≤–∞–Ω–∞")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    await publish_weekly_post()
    await message.answer("–ü–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö —Ç–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å Medium
def parse_medium_news(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTML
    print(f"Status Code for {url}: {response.status_code}")

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏
    articles = soup.find_all('a', class_='af ag ah ai aj ak al am an ao ap aq ar as at')
    print(f"Found {len(articles)} articles on {url}")

    news = []
    for article in articles:
        # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        title_tag = article.find('h2')
        if title_tag:
            title = title_tag.get_text(strip=True)
        else:
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å—é, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω

        # –ù–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
        link = article.get('href')
        if link:
            # –ü–æ–ª–Ω—ã–π URL —Å—Ç–∞—Ç—å–∏
            full_link = f"https://medium.com{link.split('?')[0]}"
            news.append({"title": title, "link": full_link})

    return news


def fetch_and_parse_news():
    urls = [
        "https://medium.com/tag/community-management",
        "https://medium.com/tag/community-building"
    ]

    all_news = []
    for url in urls:
        news = parse_medium_news(url)
        all_news.extend(news)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ URL

    return all_news[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö URL


# –ó–∞–¥–∞—á–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞
async def publish_news():
    news = fetch_and_parse_news()
    if not news:
        print("No news found.")
        return

    message = "üî• Today's Community Management News:\n\n"
    for article in news:
        message += f"üì∞ {article['title']}\nüîó {article['link']}\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫ —á–∞—Ç–∞ "News"
    await bot.send_message(chat_id='-1002163548507', text=message)


# –ö–æ–º–∞–Ω–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(commands=['publish_news'])
async def cmd_publish_news(message: types.Message):
    await publish_news()
    await message.answer("–ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def save_messages_to_db(chat_id, messages):
    for message_text in messages:
        cursor.execute(
            "INSERT INTO messages (chat_id, message_text, date) VALUES (?, ?, ?)",
            (chat_id, message_text, datetime.now())
        )
    conn.commit()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
def get_yesterday_messages(chat_id):
    yesterday = datetime.now() - timedelta(days=1)
    cursor.execute(
        "SELECT message_text FROM messages WHERE chat_id = ? AND date >= ?",
        (chat_id, yesterday)
    )
    return [row[0] for row in cursor.fetchall()]


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
def get_today_messages(chat_id):
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)  # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞—á–∏–Ω–∞—è —Å {today}")

    try:
        conn = sqlite3.connect('chat_messages.db')
        cursor = conn.cursor()

        cursor.execute(
            "SELECT message_text FROM messages WHERE chat_id = ? AND date >= ?",
            (chat_id, today)
        )

        messages = [row[0] for row in cursor.fetchall()]
        conn.close()

        if messages:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        else:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        return messages

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º –∏ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def analyze_topics_and_count(messages):
    combined_messages = "\n".join(messages)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API OpenAI
    openai.api_key = "sk-proj-kEUip-CyUJBe7ZoiIm8iACgJic0fwFcojKJdwC7eR8-FWT8vrzlyQQw77lT3BlbkFJDUgLriLYDOVGLxfbjKOC" \
                     "FyHQyGgIS6UKabrF7zm4GtDW1i16zQsliGINIA"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    prompt = (
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, —É–∫–∞–∂–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π. "
        f"–§–æ—Ä–º–∞—Ç: –¢–µ–º–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π):\n\n{combined_messages}"
    )

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —á–∞—Ç–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200,
            temperature=0.5  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        topics_summary = response['choices'][0]['message']['content'].strip()
        print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {topics_summary}")

        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º
        pattern = re.compile(r'(.+?)\s*\((\d+)\)\s*')

        topics_counter = Counter()
        for line in topics_summary.splitlines():
            match = pattern.match(line)
            if match:
                topic = match.group(1).strip()
                count = int(match.group(2))
                topics_counter[topic] += count
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä–æ–∫—É: {line}")

        return topics_counter

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º: {e}")
        return Counter()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
async def generate_summary_new(chat_id, day_date):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = get_today_messages(chat_id)

        if not messages:
            print("No messages found.")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
        topics_counter = await analyze_topics_and_count(messages)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary_message = f"üìù –ß—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å –≤—á–µ—Ä–∞ {day_date}:\n\n"
        for topic, count in topics_counter.items():
            summary_message += f"{topic} ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await bot.send_message(chat_id='-1002163548507', text=summary_message, parse_mode="Markdown")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
async def generate_summary():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π chat_id –∏ –¥–∞—Ç—É
        chat_id = '-1002163548507'  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        day_date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")  # –í—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞

        # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = get_today_messages(chat_id)

        if not messages:
            print("No messages found.")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
        topics_counter = await analyze_topics_and_count(messages)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        summary_message = f"üìù –ß—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å –≤—á–µ—Ä–∞ {day_date}:\n\n"
        for topic, count in topics_counter.items():
            summary_message += f"{topic} ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await bot.send_message(chat_id, text=summary_message, parse_mode="Markdown")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")


# –ö–æ–º–∞–Ω–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç—á–µ—Ç–∞
@dp.message_handler(commands=['weekly_sentiment'])
async def cmd_weekly_sentiment(message: types.Message):
    avg_sentiment = calculate_weekly_sentiment(message.chat.id)

    if isinstance(avg_sentiment, str):
        sentiment_report = avg_sentiment
    else:
        sentiment_report = f"–°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {avg_sentiment:.2f} (–æ—Ç -1 –¥–æ 1)."

    await message.answer(sentiment_report)


# –ö–æ–º–∞–Ω–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(commands=['publish_job'])
async def cmd_publish_job(message: types.Message):
    await publish_jobs()
    await message.answer("–í–∞–∫–∞–Ω—Å–∏–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")


# –ó–∞–¥–∞—á–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–≤–æ–¥–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
#@dp.message_handler(commands=['publish_summary'])
#async def cmd_publish_summary(message: types.Message):
#    day_date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
#    await generate_summary_new('-1002163548507', day_date)
#    await message.answer("–°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")


# –ó–∞–¥–∞—á–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–≤–æ–¥–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
@dp.message_handler(commands=['publish_summary'])
async def cmd_publish_summary(message: types.Message):
    day_date = datetime.now().strftime("%Y-%m-%d")  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    await generate_summary_new('-1002163548507', day_date)
    await message.answer("–°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_new_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
    await save_messages_to_db(message.chat.id, [message.text])
    sentiment_value = await analyze_sentiment(message.text)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('mess.db')
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO mess (chat_id, text, sentiment, date)
        VALUES (?, ?, ?, ?)
    ''', (message.chat.id, message.text, sentiment_value, datetime.now()))

    conn.commit()
    conn.close()

    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–æ–º: {sentiment_value}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI
async def analyze_sentiment(message_text):
    prompt = \
        f"–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ -1 (–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ), 0 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ) –∏–ª–∏ 1 (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ):\n\n{message_text}"

    openai.api_key = "sk-proj-kEUip-CyUJBe7ZoiIm8iACgJic0fwFcojKJdwC7eR8-FWT8vrzlyQQw77lT3BlbkFJDUgLriLYDOVGLxfbjKOCF" \
                     "yHQyGgIS6UKabrF7zm4GtDW1i16zQsliGINIA"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å OpenAI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": prompt}
        ],
        max_tokens=1,
        temperature=0.0
    )

    response_message = response['choices'][0]['message']['content'].strip()

    try:
        sentiment_value = float(response_message)
    except ValueError:
        sentiment_value = 0  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç, —Å—á–∏—Ç–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º

    return sentiment_value


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞
@dp.message_handler(lambda message: is_spam(message))
async def handle_spam(message: types.Message):
    await message.delete()
    await message.reply("‚ö†Ô∏è –°–ø–∞–º –±—ã–ª —É–¥–∞–ª–µ–Ω.")


# –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞
def is_spam(message: types.Message) -> bool:
    if message.text.startswith('/'):
        return False  # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–ø–∞–º–æ–º

    spam_patterns = [
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',  # –°—Å—ã–ª–∫–∏
        r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',  # Email
        r'(?i)(free|click here|buy now|limited time offer|sale)',  # –°–ø–∞–º-—Å–ª–æ–≤–∞
        r'([0-9]{10})',  # –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    ]

    if any(re.search(pattern, message.text) for pattern in spam_patterns):
        return True

    if message.forward_from or len(message.text.split()) < 3:
        return True

    return False


def get_admin_panel():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        KeyboardButton("/publish_news"),
        KeyboardButton("/publish_summary"),
        KeyboardButton("/weekly_sentiment"),
        KeyboardButton("/publish_weekly_post"),  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    ]
    keyboard.add(*buttons)
    return keyboard


async def generate_content_from_topics(chat_id):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
    messages = get_today_messages(chat_id)

    if not messages:
        print("No messages found.")
        return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    topics_counter = await analyze_topics_and_count(messages)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    topics_list = "\n".join([f"{topic}" for topic, _ in topics_counter.items()])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–∞–º
    openai.api_key = 'sk-proj-kEUip-CyUJBe7ZoiIm8iACgJic0fwFcojKJdwC7eR8-FWT8vrzlyQQw77lT3BlbkFJDUgLriLYDOVGLxfbjK' \
                     'OCFyHQyGgIS6UKabrF7zm4GtDW1i16zQsliGINIA'

    prompt = (
        f"–°–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏ –≤—á–µ—Ä–∞ –≤ —á–∞—Ç–µ. "
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —ç—Ç–∏ —Ç–µ–º—ã –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ª–µ–∑–Ω—É—é –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:\n\n{topics_list}"
    )

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–∏—à–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ Telegram —á–∞—Ç–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=400,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
            temperature=0.7  # –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content = response['choices'][0]['message']['content'].strip()
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")

        return content

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return None


async def publish_weekly_post():
    chat_id = '-1002163548507'  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞

    print("–ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    content = await generate_content_from_topics(chat_id)

    if content:
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        messages = split_message(content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        for part in messages:
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {part}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            await send_message_with_retry(bot, chat_id, part)
            await asyncio.sleep(5)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.message_handler(commands=['admin'])
async def cmd_admin_panel(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.is_chat_admin():
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", reply_markup=get_admin_panel())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é Telegram
def split_message(text, max_length=4096):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ
    messages = []
    while len(text) > max_length:
        # –ù–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        split_pos = text[:max_length].rfind('\n')
        if split_pos == -1:
            split_pos = max_length
        messages.append(text[:split_pos])
        text = text[split_pos:].strip()
    messages.append(text)
    return messages


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
async def send_message_with_retry(bot, chat_id, text):
    while True:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        except RetryAfter as e:
            wait_time = e.timeout
            print(f"Flood control exceeded. Retrying in {wait_time} seconds.")
            await asyncio.sleep(wait_time)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –±–æ—Ç–æ–º
async def publish_jobs():
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∞–π—Ç–æ–≤
    driver_path = "chromedriver.exe"
    jobs_site_1 = scrape_jobs(url="https://jobstash.xyz/jobs", chrome_driver_path=driver_path,
                              headless=True, max_pages=5)

    url_2 = "https://cryptocurrencyjobs.co"
    jobs_site_2 = scrape_jobs_2(url_2, driver_path, num_pages=3, pause_time=5, headless=True)

    url_3 = "https://cryptojobslist.com"
    jobs_site_3 = scrape_jobs_3(url_3, driver_path)

    url_4 = 'https://degencryptojobs.com/'
    jobs_site_4 = scrape_jobs_4(driver_path, url_4, headless=True)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_jobs = jobs_site_1 + jobs_site_2 + jobs_site_3 + jobs_site_4

    if not all_jobs:
        print("No jobs found.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    message = "üíº –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for job in all_jobs:
        message += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {job['title']}\n"
        message += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {job['company']}\n"
        message += f"üåç –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {job['work_mode']}\n"
        message += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {job['link']}\n"
        message += "-" * 40 + "\n\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    messages = split_message(message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    for part in messages:
        await send_message_with_retry(bot, chat_id='-1002163548507', text=part)
        await asyncio.sleep(10)


@dp.message_handler(content_types=["new_chat_members"])
async def new_member(message: types.Message):
    welcome_message = (
        "üåü Welcome to the Community Managers' HUB!\n"
        "This is your go-to place for exchanging experiences, finding collaborations, and growing together.\n"
        "Share insights, seek advice, or partner on projects, our community of CMs is here to support you."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    sent_message = await bot.send_message(message.chat.id, welcome_message, parse_mode="html")

    # –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(30)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
def calculate_weekly_sentiment(chat_id):
    one_week_ago = datetime.now() - timedelta(days=7)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('mess.db')
    cursor = conn.cursor()

    cursor.execute('''
        SELECT sentiment FROM mess 
        WHERE chat_id = ? AND date >= ?
    ''', (chat_id, one_week_ago))

    messages_in_week = cursor.fetchall()
    conn.close()

    if not messages_in_week:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞."

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
    total_sentiment = sum(msg[0] for msg in messages_in_week)
    average_sentiment = total_sentiment / len(messages_in_week)

    return average_sentiment


# –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async def publish_weekly_sentiment_report():
    conn = sqlite3.connect('mess.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã
    cursor.execute('SELECT DISTINCT chat_id FROM mess')
    chat_ids = cursor.fetchall()

    for chat_id_tuple in chat_ids:
        chat_id = chat_id_tuple[0]
        avg_sentiment = calculate_weekly_sentiment(chat_id)

        if isinstance(avg_sentiment, str):
            sentiment_report = avg_sentiment  # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        else:
            sentiment_report = f"–°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {avg_sentiment:.2f} (–æ—Ç -1 –¥–æ 1)."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ —á–∞—Ç
        await bot.send_message('-1002163548507', sentiment_report)

    conn.close()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
scheduler.add_job(publish_news, "cron", hour=9, minute=0)
scheduler.add_job(generate_summary, "cron", hour=10, minute=0)
scheduler.add_job(publish_jobs, "cron", hour=11, minute=0)
scheduler.add_job(publish_weekly_sentiment_report, 'cron', day_of_week='mon', hour=9, minute=0)
scheduler.add_job(publish_weekly_post, 'cron', day_of_week='mon', hour=12, minute=0)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
